---
title: "Tree Top Clustering at Letchworth Learning Forest"
author: "Tina Ni"
subtitle: "Utlizing Lidar Point Cloud Data to Map Out Forest Tree Top Clustering"
date: today
date-format: long
---

# Introduction

\[\~ 200 words\]

Observing forest structure is beneficial in understanding various forest characteristics. These characteristics include biodiversity, ecosystem disturbances and possibly any threats that may affect the forest structure and ecosystem. On-site forest modeling and monitoring is difficult to preserve due to resource restrictions. Utilizing remote sensing tools can allow researchers and foresters to overcome time, labor, and funding restrictions. In this project, I utilized remote sensing data to look at the Letchworth Learning Forest structure and try to interpret forest characteristics remotely.

# Materials and methods

\[\~ 200 words\]

In this project, I utilized 2019 remote sensing LiDAR point-cloud data to measure vertical forest structure within the Letchworth Learning Forest near the Ellicott Complex. Â By looking at vertical structure, I was able to find spatial clustering of the tallest (90%) woody individuals.

These clusters were then projected onto the latest leaflet map, to see if the forest parameter has been altered following the remote sensing date.

The main r packages that were utilized were lidR, terra, and raster.

Here's my current on-going code.

```{r Load packages, echo = TRUE, output = FALSE, results = FALSE}
library("sf")
library("terra")
library("lidR")
library("raster")
library("dbscan")
library("tidyverse")
library("leaflet")
library("RColorBrewer")
```


```{r Read LiDAR data }
las <- readLAS("data/Letchworth_Teaching_Forest_Lidar.laz")
#st_crs(las)
## Look at the parameter coordinates of original data
original_bbox <- st_bbox(las)

# plot3d(las$X, las$Y, las$Z, col = rainbow(1000))
```

```{r Create a new bounding box that only includes the forest area, echo = TRUE, results = 'hide'}
polygon_coords <- matrix(c(
  1388000, 2349355, #right bottom corner
  1388000, 2349700, #right top corner
  1387450, 2349700, #mid top corner
  1387450, 2349450, #mid mid corner
  1387300, 2349200, #left bottom corner
  1387350, 2349200, #mid bottom corner
  1388000, 2349355  #right bottom corner
), ncol = 2, byrow = TRUE)

## Bounding Box has been given CRS associated with las-CRS 
polygon_sf <- st_sfc(st_polygon(list(polygon_coords)),  crs = st_crs(las))
plot(polygon_sf)
```

```{r Crop orinigal data by bounding box and filter out vertical outliers)}
las_clipped <- lidR::clip_roi(las, polygon_sf)
## Check if the crs is still the same
st_crs(polygon_sf) == st_crs(las)

## Filter out any OUTliers z-values from las
#filterOUT_las <- filter_poi(las_clipped, Z >= 182, Z <= 220)
filterOUT_las <- filter_poi(las_clipped, Z >= 180, Z <= 220)

# rglwidget(plot(filterOUT_las))
# plot3d(filterOUT_las$X, filterOUT_las$Y, filterOUT_las$Z)

```

```{r Test to see if the clipped data will correctly change to leaflet crs}
## Reproject the las to 4326 for Leaflet
las84 <- st_as_sf(las_clipped, coords = c("X", "Y"), crs = 26918) # crs was NAD83(2011)
las84 <- st_transform(las_clipped, crs = 4326)

options(digits = 15)


## Create a dataframe of points lat and long to check if st_transform worked  
las_df <- data.frame(lat = st_coordinates(las84)[, 2],
                     long = st_coordinates(las84)[, 1])

unique(las_df$lat)
unique(las_df$long)
```

```{r Rasterize data, and find the 90% trees, results = 'hide'}
## LidR functions to find individual trees
chm <- rasterize_canopy(filterOUT_las, 0.25, pitfree(subcircle = 1))

tree_tops <- locate_trees(chm, lmf (ws=5))
filtered_tree_tops <- tree_tops %>%
filter(Z >= 185)

#plot(chm, col = height.colors(50))
#plot(sf::st_geometry(filtered_tree_tops), pch = 3)
#plot(sf::st_geometry(filtered_tree_tops), add = TRUE, pch = 3)

nintypercent <- quantile(filtered_tree_tops$Z, 0.90)
tall_trees <- filtered_tree_tops[filtered_tree_tops$Z > nintypercent,]

coords <- st_coordinates(tall_trees)
```

```{r making a histogram of height distribution}
tree_Z <- as.data.frame(filtered_tree_tops$Z)
colnames(tree_Z) <- c("height")
test <- tree_Z$height - 180
test <- as.data.frame(test)
max(test)

## in meters
ggplot(data = test, aes(x = test)) +
geom_histogram(binwidth = 0.2,fill="black")+
labs(title = "Distrubtion of Tree Hieghts", x = "Hieght (m)", y = "Tree Count" )
```

```{r echo = FALSE}
plot(chm, main = "chm")
plot(filtered_tree_tops[2],pch = 16, cex = .5, main = "tree_tops")
plot(tall_trees, pch = 16, cex = .5, main = "tall_trees" )
```

```{r Findind spatial clustering}
dbscan_result <- dbscan(coords, eps = 12, minPts = 5)  
tall_trees$dbscan_cluster <- as.factor(dbscan_result$cluster)
unique (tall_trees$dbscan_cluster)
plot(tall_trees[3], pch = 16, cex = .5)

```

```{r Project onto leaflet map}
pal <- colorFactor(brewer.pal(4, "Set1"), domain = tall_trees$dbscan_cluster)

st_tall_trees <- st_transform(tall_trees, crs = 4326)
leaflet (st_tall_trees) %>%
  setView(lng = -78.793, lat = 43.007, zoom = 13)  %>%
  addTiles() %>%
  addCircleMarkers(
    radius = 2,
    color = ~pal(dbscan_cluster),
    popup = ~paste("ID:", treeID, "<br> Height:", Z))

```

Load any required packages in a code chunk (you may need to install some packages):

```{r, message=F, warning=F, results = 'hide'}
 install.packages("sf")
 install.packages("terra")
 install.packages("lidR")
 install.packages("raster")
 install.packages("dbscan")
 install.packages("tidyverse")
 install.packages("leaflet")
 install.packages("RColorBrewer")
 install.packages("knitr")
 install.packages("rgl")
```

# Conclusionsn

\[\~200 words\]

Clear summary adequately describing the results and putting them in context. Discussion of further questions and ways to continue investigation.

# References

All sources are cited in a consistent manner
